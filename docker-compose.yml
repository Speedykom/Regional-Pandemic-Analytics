version: "3.4"

x-druid-common:
  &druid
  environment:
    - DRUID_SINGLE_NODE_CONF=${DRUID_DRUID_SINGLE_NODE_CONF}
    - druid_emitter_logging_logLevel=${DRUID_druid_emitter_logging_logLevel}
    - druid_extensions_loadList=${DRUID_druid_extensions_loadList}
    - druid_zk_service_host=${DRUID_druid_zk_service_host}
    - druid_metadata_storage_host=${DRUID_druid_metadata_storage_host}
    # - druid_metadata_storage_type=${DRUID_druid_metadata_storage_type}
    # - druid_metadata_storage_connector_connectURI=${DRUID_druid_metadata_storage_connector_connectURI}
    # - druid_metadata_storage_connector_user=${DRUID_druid_metadata_storage_connector_user}
    # - druid_metadata_storage_connector_password=${DRUID_druid_metadata_storage_connector_password}
    - druid_coordinator_balancer_strategy=${DRUID_druid_coordinator_balancer_strategy}
    - druid_indexer_runner_javaOptsArray=${DRUID_druid_indexer_runner_javaOptsArray}
    - druid_indexer_fork_property_druid_processing_buffer_sizeBytes=${DRUID_druid_indexer_fork_property_druid_processing_buffer_sizeBytes}
    - druid_storage_type=${DRUID_druid_storage_type}
    - druid_storage_storageDirectory=${DRUID_druid_storage_storageDirectory}
    - druid_indexer_logs_type=${DRUID_druid_indexer_logs_type}
    - druid_indexer_logs_directory=${DRUID_druid_indexer_logs_directory}
    - druid_processing_numThreads=${DRUID_druid_processing_numThreads}
    - druid_processing_numMergeBuffers=${DRUID_druid_processing_numMergeBuffers}
    - DRUID_LOG4J=${DRUID_DRUID_LOG4J}
x-airflow-common:
  &airflow
  image: apache/airflow:2.5.2
  user: "0:0"
  environment:
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_AIRFLOW__CORE__FERNET_KEY}
    - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_AIRFLOW__CORE__EXECUTOR}
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
    - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_AIRFLOW__CORE__LOAD_EXAMPLES}
    - SQLALCHEMY_SILENCE_UBER_WARNING=${AIRFLOW_SQLALCHEMY_SILENCE_UBER_WARNING}
    - AIRFLOW_UID=${AIRFLOW_AIRFLOW_UID}
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    - AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS=${AIRFLOW_AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS}
    - _AIRFLOW_DB_UPGRADE=${AIRFLOW__AIRFLOW_DB_UPGRADE}
    - _AIRFLOW_WWW_USER_CREATE=${AIRFLOW__AIRFLOW_WWW_USER_CREATE}
    - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW__AIRFLOW_WWW_USER_USERNAME}
    - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW__AIRFLOW_WWW_USER_PASSWORD}
    - PROVIDER_NAME=${AIRFLOW_PROVIDER_NAME}
    - CLIENT_ID=${AIRFLOW_CLIENT_ID}
    - CLIENT_SECRET=${AIRFLOW_CLIENT_SECRET}
    - OIDC_ISSUER=${AIRFLOW_OIDC_ISSUER}
    - KEYCLOAK_BASE_URL=${AIRFLOW_KEYCLOAK_BASE_URL}
    - KEYCLOAK_TOKEN_URL=${AIRFLOW_KEYCLOAK_TOKEN_URL}
    - KEYCLOAK_AUTH_URL=${AIRFLOW_KEYCLOAK_AUTH_URL}
    - AUTH_USER_REGISTRATION=${AIRFLOW_AUTH_USER_REGISTRATION}
    - AUTH_USER_REGISTRATION_ROLE=${AIRFLOW_AUTH_USER_REGISTRATION_ROLE}
    - AUTH_ROLES_SYNC_AT_LOGIN=${AIRFLOW_AUTH_ROLES_SYNC_AT_LOGIN}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/webserver_config.py:/opt/airflow/webserver_config.py
    - ./airflow/user_auth.py:/opt/airflow/user_auth.py
    - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    - /var/run/docker.sock:/var/run/docker.sock

volumes:
  superset_data: {}
  metadata_data: {}
  airflow_data: {}
  backend_data: {}
  keyclock_data: {}
  minio_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}

services:
  # ========
  # Minio
  # ========
  storage:
    image: quay.io/minio/minio:RELEASE.2023-03-24T21-41-23Z
    container_name: storage
    command: minio server /data --console-address ":9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_SERVER_URL=${MINIO_SERVER_URL}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL}

    ports:
      - "9001:9000"
      - "8887:9090"
    volumes:
      - minio_data:/data

  # ========
  # Frontend
  # ========
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      target: runner
      args:
      - NEXT_PUBLIC_MINIO_URL=${FRONTEND_NEXT_PUBLIC_MINIO_URL}
      - NEXT_PRIVATE_BASE_URL=${FRONTEND_NEXT_PRIVATE_BASE_URL}
      - NEXT_PUBLIC_BASE_URL=${FRONTEND_NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_SUPERSET_URL=${FRONTEND_NEXT_PUBLIC_SUPERSET_URL}
      - NEXT_HOP_UI=${FRONTEND_NEXT_HOP_UI}
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_MINIO_URL=${FRONTEND_NEXT_PUBLIC_MINIO_URL}
      - NEXT_PRIVATE_BASE_URL=${FRONTEND_NEXT_PRIVATE_BASE_URL}
      - NEXT_PUBLIC_BASE_URL=${FRONTEND_NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_SUPERSET_URL=${FRONTEND_NEXT_PUBLIC_SUPERSET_URL}
      - NEXT_HOP_UI=${FRONTEND_NEXT_HOP_UI}
    restart: always

  # ========
  # Backend
  # ========
  backend_db:
    image: postgres:14
    container_name: backend_db
    volumes:
      - backend_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=igad
      - POSTGRES_USER=igad
      - POSTGRES_DB=igad

  backend:
    container_name: backend
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - backend_db
    ports:
      - "8000:8000"
    volumes:
      - ./airflow/dags:/airflow/dags
      - ./hop/pipelines/:/hop
      - ./hop/pipelines/templates:/hop/templates
      - ./hop/data-orch.list:/hop/data-orch.list
    environment:
      - DEVELOPMENT_MODE=${BACKEND_DEVELOPMENT_MODE}
      - KEYCLOAK_ADMIN_CLIENT_ID=${BACKEND_KEYCLOAK_ADMIN_CLIENT_ID}
      - KEYCLOAK_ADMIN_CLIENT_SECRET=${BACKEND_KEYCLOAK_ADMIN_CLIENT_SECRET}
      - KEYCLOAK_ADMIN_AUTH_URL=${BACKEND_KEYCLOAK_ADMIN_AUTH_URL}
      - KEYCLOAK_ADMIN_USERNAME=${BACKEND_KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${BACKEND_KEYCLOAK_ADMIN_PASSWORD}
      - APP_REALM=${BACKEND_APP_REALM}
      - APP_CLIENT_ID=${BACKEND_APP_CLIENT_ID}
      - HOPE_PIPELINE_PATH=${BACKEND_HOPE_PIPELINE_PATH}
      - HOPE_TEMPLATE_PATH=${BACKEND_HOPE_TEMPLATE_PATH}
      - APP_USER_BASE_URL=${BACKEND_APP_USER_BASE_URL}
      - BASE_URL=${BACKEND_BASE_URL}
      - APP_SECRET_KEY=${BACKEND_APP_SECRET_KEY}
      - APP_USER_ROLES=${BACKEND_APP_USER_ROLES}
      - CLIENT_ID=${BACKEND_CLIENT_ID}
      - CLIENT_SECRET=${BACKEND_CLIENT_SECRET}
      - KEYCLOAK_REALM=${BACKEND_KEYCLOAK_REALM}
      - KEYCLOAK_SERVER_URL=${BACKEND_KEYCLOAK_SERVER_URL}
      - REST_REDIRECT_URI=${BACKEND_REST_REDIRECT_URI}
      - MINIO_URL=${BACKEND_MINIO_URL}
      - MINIO_ACCESS_KEY=${BACKEND_MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${BACKEND_MINIO_SECRET_KEY}
      - MINIO_BUCKET=${BACKEND_MINIO_BUCKET}
      - AVATAR_BASE_URL=${BACKEND_AVATAR_BASE_URL}
      - MAIL_MAILER=${BACKEND_MAIL_MAILER}
      - MAIL_HOST=${BACKEND_MAIL_HOST}
      - MAIL_PORT=${BACKEND_MAIL_PORT}
      - MAIL_SENDER=${BACKEND_MAIL_SENDER}
      - MAIL_USER=${BACKEND_MAIL_USER}
      - MAIL_PASSWORD=${BACKEND_MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${BACKEND_MAIL_ENCRYPTION}
      - MAIL_FROM_NAME=${BACKEND_MAIL_FROM_NAME}
      - AIRFLOW_API=${BACKEND_AIRFLOW_API}
      - AIRFLOW_USER=${BACKEND_AIRFLOW_USER}
      - AIRFLOW_PASSWORD=${BACKEND_AIRFLOW_PASSWORD}
      - DB_NAME=${BACKEND_DB_NAME}
      - DB_ENGINE=${BACKEND_DB_ENGINE}
      - DB_USER=${BACKEND_DB_USER}
      - DB_PASSWORD=${BACKEND_DB_PASSWORD}
      - DB_HOST=${BACKEND_DB_HOST}
      - DB_PORT=${BACKEND_DB_PORT}
      - DATABASE_URL=${BACKEND_DATABASE_URL}
      - SUPERSET_BASE_URL=${BACKEND_SUPERSET_BASE_URL}
      - SUPERSET_LOGIN=${BACKEND_SUPERSET_LOGIN}
      - SUPERSET_USER=${BACKEND_SUPERSET_USER}
      - SUPERSET_PASS=${BACKEND_SUPERSET_PASS}
      - SUPERSET_PROVIDER=${BACKEND_SUPERSET_PROVIDER}
      - SUPERSET_GUEST_USERNAME=${BACKEND_SUPERSET_GUEST_USERNAME}
      - SUPERSET_GUEST_FIRSTNAME=${BACKEND_SUPERSET_GUEST_FIRSTNAME}
      - SUPERSET_GUEST_LASTNAME=${BACKEND_SUPERSET_GUEST_LASTNAME}
      - CORS_ORIGIN_ALLOW_ALL=${BACKEND_CORS_ORIGIN_ALLOW_ALL}
      - SUPERSET_ALLOWED_DOMAINS=${BACKEND_SUPERSET_ALLOWED_DOMAINS}

  # =======
  #  Druid
  # =======
  db:
    image: postgres:14
    container_name: db
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DRUID_POSTGRES_PASSWORD}
      - POSTGRES_USER=${DRUID_POSTGRES_USER}
      - POSTGRES_DB=${DRUID_POSTGRES_DB}

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=${ZOOKEEPER_ZOO_MY_ID}

  coordinator:
    <<: *druid
    image: apache/druid:25.0.0
    container_name: coordinator
    volumes:
      - ./storage:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
    ports:
      - "8081:8081"
    command:
      - coordinator

  broker:
    <<: *druid
    image: apache/druid:25.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker

  historical:
    <<: *druid
    image: apache/druid:25.0.0
    container_name: historical
    volumes:
      - ./storage:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical

  middlemanager:
    <<: *druid
    image: apache/druid:25.0.0
    container_name: middlemanager
    volumes:
      - ./storage:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager

  router:
    <<: *druid
    image: apache/druid:25.0.0
    container_name: router
    volumes:
      - ./storage:/opt/shared
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8884:8888"
    command:
      - router

  # =======
  # Superset
  # =======
  superset_cache:
    container_name: superset_cache
    image: redis:5
    restart: always

  superset_db:
    container_name: superset_db
    image: postgres:14
    volumes:
      - superset_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${SUPERSET_POSTGRES_PASSWORD}
      - POSTGRES_USER=${SUPERSET_POSTGRES_USER}
      - POSTGRES_DB=${SUPERSET_POSTGRES_DB}

  superset:
    container_name: superset
    build: ./superset/.
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - SUPERSET_DATABASE_URI=${SUPERSET_DATABASE_URI}
      - SUPERSET_KEYCLOAK_APP_REALM=${SUPERSET_KEYCLOAK_APP_REALM}
      - SUPERSET_KEYCLOAK_CLIENT_ID=${SUPERSET_KEYCLOAK_CLIENT_ID}
      - SUPERSET_KEYCLOAK_CLIENT_SECRET=${SUPERSET_KEYCLOAK_CLIENT_SECRET}
      - SUPERSET_KEYCLOAK_EXTERNAL_URL=${SUPERSET_KEYCLOAK_EXTERNAL_URL}
      - SUPERSET_KEYCLOAK_INTERNAL_URL=${SUPERSET_KEYCLOAK_INTERNAL_URL}
      - SUPERSET_FEATURE_EMBEDDED_SUPERSET=True
    volumes:
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py
    ports:
      - 8883:8088
    depends_on:
      - superset_db
      - superset_cache
    restart: always
    entrypoint: /bin/bash
    command:
      - -c
      - |
        superset fab create-admin --username speedykom --firstname Superset --lastname Admin --email admin@superset.com --password speedykom
        superset db upgrade
        superset superset init
        cd /usr/bin && ./run-server.sh

  # =====
  #  Hop
  # =====
  hop:
    build: ./hop
    container_name: hop
    user: "0:1000"
    ports:
      - "8882:8080"
    volumes:
      - ./hop/pipelines:/files
      - ./storage:/home
      - ./hop/data-orch.list:/usr/local/tomcat/webapps/ROOT/audit/igad/data-orch.list
      - ./hop/keycloak/server.xml:/usr/local/tomcat/conf/server.xml
    environment:
      - HOP_KEYCLOAK_URL=${HOP_KEYCLOAK_URL}

    # =======
    # Airflow
    # =======
  airflow-pg:
    image: postgres:14
    container_name: airflow-pg
    environment:
      - POSTGRES_USER=${AIRFLOW_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_POSTGRES_DB}
    ports:
      - "6434:6432"
    volumes:
      - airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5

  airflow-scheduler:
    <<: *airflow
    depends_on:
      - airflow-pg
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"

  airflow-webserver:
    <<: *airflow
    depends_on:
      airflow-pg:
        condition: service_healthy
      keycloak:
        condition: service_healthy
        restart: true
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8881:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 30s
      timeout: 30s
      retries: 5

  # =======
  # keycloak
  # =======
  keycloak-pg:
    container_name: keycloak-pg
    image: postgres:14
    command: postgres -c 'max_connections=200'
    volumes:
      - keyclock_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${KEYCLOAK_POSTGRES_PASSWORD}
      - POSTGRES_USER=${KEYCLOAK_POSTGRES_USER}
      - POSTGRES_DB=${KEYCLOAK_POSTGRES_DB}
    healthcheck:
      test: "exit 0"
    ports:
      - "5434:5432"

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.0
    container_name: "keycloak"
    command:
      - start-dev
      - --import-realm
    ports:
      - "8885:8080"
    environment:
      - KC_DB=${KEYCLOAK_DB}
      - KC_DB_URL_DATABASE=${KEYCLOAK_DB_URL_DATABASE}
      - KC_DB_URL_HOST=${KEYCLOAK_DB_URL_HOST}
      - KC_DB_USERNAME=${KEYCLOAK_DB_USERNAME}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - KC_DB_SCHEMA=${KEYCLOAK_DB_SCHEMA}
      - KC_PROXY=${KEYCLOAK_PROXY}
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_HEALTH_ENABLED=true
      - KEYCLOAK_ADMIN=${KEYCLOAK_KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_KEYCLOAK_ADMIN_PASSWORD}
      - BACKEND_CLIENT_ID=${BACKEND_CLIENT_ID}
      - BACKEND_CLIENT_SECRET=${BACKEND_CLIENT_SECRET}
      - BACKEND_PUBLIC_URL=${BACKEND_PUBLIC_URL}
      - SUPERSET_ROOT_URL=${SUPERSET_ROOT_URL}
      - SUPERSET_KEYCLOAK_CLIENT_ID=${SUPERSET_KEYCLOAK_CLIENT_ID}
      - SUPERSET_KEYCLOAK_CLIENT_SECRET=${SUPERSET_KEYCLOAK_CLIENT_SECRET}
    restart: unless-stopped
    volumes:
      - ./keycloak/realm/realm.json:/opt/keycloak/data/import/realm.json
    depends_on:
      - keycloak-pg
    healthcheck:
      test: [
          "CMD",
          "curl",
          "--head","-fsS",
          "http://localhost:8080/health/ready"
        ]
      interval: 60s
      timeout: 10s
      retries: 10
