#!/usr/bin/env python3
import os
import smtplib
import sys
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timezone

def read_status_file(file_path):
    services = {}
    
    try:
        with open(file_path, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                
                # Process status lines
                if ':' in line:
                    parts = line.split(':', 2)
                    if len(parts) == 3:  # Format: server:service:status
                        server, service, status = parts
                        server = server.strip()
                        service = service.strip()
                        status = status.strip().lower()
                        
                        # Initialize server dict if not exists
                        if server not in services:
                            services[server] = {}
                        
                        # Add service status
                        services[server][service] = status
    except Exception as e:
        print(f"Error reading status file: {e}")
    
    return services

def generate_email_content(services, timestamp, project_name, subject_prefix=None):
    # Count total services and down services across all servers
    total_services = 0
    down_services = 0
    servers_with_issues = 0
    total_servers = len(services)
    
    # Collect all unique service names across all servers
    all_services = set()
    for server, server_services in services.items():
        all_services.update(server_services.keys())
    all_services = sorted(list(all_services))
    
    # Count statistics
    for server, server_services in services.items():
        server_has_issues = False
        for service, status in server_services.items():
            total_services += 1
            if status == 'down':
                down_services += 1
                server_has_issues = True
        if server_has_issues:
            servers_with_issues += 1
    
    # Create subject line with status icon
    if subject_prefix:
        subject = f"{subject_prefix} - {project_name} Status Report"
    else:
        subject = f"[{'❌' if down_services > 0 else '✅'}] {project_name} Status Report"
    
    # Build email body
    body = f"""
===================================================
 {project_name} Production Server Status Report
===================================================

Hello,

This is your automated production server status report generated by {project_name} CI/CD.
Timestamp: {timestamp} UTC

Overall Summary:
  - Total Servers: {total_servers}
  - Servers with Issues: {servers_with_issues}
  - Total Services: {total_services}
  - Down Services: {down_services}
"""
    
    # Create a comparison table showing all servers side by side
    body += "\n\n## Status Comparison Across All Servers\n"
    
    # Table header with server names
    header = "+----------------------+"
    for _ in services:
        header += "----------+"
    body += header + "\n"
    
    # Service column and server names
    servers_header = "|      Service         |"
    for server in sorted(services.keys()):
        # Truncate long server names but ensure they're distinct
        display_name = server
        if len(display_name) > 8:
            display_name = display_name[:7] + "."
        servers_header += f" {display_name:<8} |"
    body += servers_header + "\n"
    
    # Separator line
    body += header + "\n"
    
    # Add rows for each service
    for service in all_services:
        row = f"| {service:<20} |"
        for server in sorted(services.keys()):
            status = services[server].get(service, "unknown")
            status_symbol = "✅" if status == "up" else "❌" if status == "down" else "?"
            row += f" {status_symbol:<8} |"
        body += row + "\n"
    
    body += header + "\n"
    
    # Add detailed tables for each server
    body += "\n\n## Detailed Server Reports\n"
    
    # Add per-server details
    for server in sorted(services.keys()):
        server_services = services[server]
        body += f"\n### Server: {server}\n"
        body += """
+----------------------+----------+-----------------------------+
|      Service         |  Status  |           URL               |
+----------------------+----------+-----------------------------+
"""
        
        # Sort services for consistent display
        for service in sorted(all_services):
            url = f"https://{service}2.{server}"
            
            if service in server_services:
                status = server_services[service]
                status_display = status.upper()
            else:
                status_display = "N/A"
                
            body += f"| {service:<20} | {status_display:<8} | {url:<27} |\n"
        
        body += "+----------------------+----------+-----------------------------+\n"
    
    return subject, body

def send_email(sender, recipients, subject, body, smtp_config):
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)
    msg['Subject'] = subject
    
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        with smtplib.SMTP(smtp_config['host'], smtp_config['port']) as server:
            server.starttls()
            server.login(smtp_config['user'], smtp_config['password'])
            server.send_message(msg)
        print("✅ Email sent successfully")
        return True
    except Exception as e:
        print(f"❌ Failed to send email: {e}")
        return False

def main():
    if len(sys.argv) < 3:
        print("Usage: python send_status_email.py <status_file> <project_name> [subject_prefix]")
        print("Example: python send_status_email.py status.txt 'SpeedyMesh Multi-Server Monitor' '[2/3 servers up]'")
        sys.exit(1)
    
    status_file = sys.argv[1]
    project_name = sys.argv[2]
    subject_prefix = sys.argv[3] if len(sys.argv) > 3 else None
    
    # SMTP Configuration
    smtp_config = {
        'host': os.getenv('BACKEND_MAIL_HOST', 'smtp.gmail.com'),
        'port': int(os.getenv('BACKEND_MAIL_PORT', '587')),
        'user': os.getenv('BACKEND_MAIL_USER', ''),
        'password': os.getenv('BACKEND_MAIL_PASSWORD', '')
    }
    
    sender = os.getenv('EMAIL_FROM', '')
    recipients = [r.strip() for r in os.getenv('EMAIL_TO', '').split(',') if r.strip()]
    
    if not all([sender, recipients, smtp_config['user'], smtp_config['password']]):
        print("❌ Missing required email configuration")
        sys.exit(1)
    
    try:
        services = read_status_file(status_file)
        timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')
        subject, body = generate_email_content(services, timestamp, project_name, subject_prefix)
        
        print(f"Sending email with subject: {subject}")
        if send_email(sender, recipients, subject, body, smtp_config):
            sys.exit(0)
        else:
            sys.exit(1)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
