#!/usr/bin/env python3
import os
import smtplib
import sys
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timezone

def read_status_file(file_path):
    """Read the status file and parse the service statuses."""
    services = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Extract service statuses using regex
            pattern = r'<tr><td>(.*?)\(([^)]+)\)<\/td><td class=\"(status-(?:up|down|na))\">(.*?)<\/td><\/tr>'
            matches = re.findall(pattern, content)
            
            for match in matches:
                service_name = match[0].strip()
                url = match[1].strip()
                status_class = match[2]
                status_text = match[3].strip()
                
                # Map status class to status
                if 'status-up' in status_class:
                    status = 'UP'
                elif 'status-down' in status_class:
                    status = 'DOWN'
                else:
                    status = 'N/A'
                
                # Extract server from URL - use the main domain (last 3 parts of the hostname)
                hostname = url.split('//')[-1].split('/')[0]
                if '.' in hostname:
                    # Get the main domain (last 3 parts like 'train-cohis.minsante.cm')
                    parts = hostname.split('.')
                    server = '.'.join(parts[-3:]) if len(parts) >= 3 else hostname
                else:
                    server = 'unknown'
                
                services.append({
                    'server': server,
                    'service': service_name,
                    'status': status,
                    'url': url
                })
                
    except Exception as e:
        print(f"Error reading status file: {e}")
    return services

def generate_email_content(services, project_name, subject_prefix=None):
    """Generate the email content in the desired format."""
    # Group services by server
    servers = {}
    for service in services:
        if service['server'] not in servers:
            servers[service['server']] = []
        servers[service['server']].append(service)
    
    # Get unique services for the comparison table (maintain original order)
    seen = set()
    all_services = [s['service'] for s in services if not (s['service'] in seen or seen.add(s['service']))]
    
    # Build the email content
    timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')
    
    # Start HTML content
    html = """<!DOCTYPE html>
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
            .status-up {{ color: green; font-weight: bold; }}
            .status-down {{ color: red; font-weight: bold; }}
            .status-na {{ color: black; font-weight: bold; }}
            table {{ border-collapse: collapse; margin: 15px 0; border: 1px solid #ddd; }}
            th, td {{ padding: 8px; text-align: left; border: 1px solid #ddd; }}
            th {{ background-color: #f2f2f2; }}
            h3, h4 {{ margin-top: 20px; }}
            a {{ color: #0066cc; text-decoration: none; }}
            a:hover {{ text-decoration: underline; }}
        </style>
    </head>
    <body>
        <p>Hello,</p>
        <p>This is your automated production server status report generated by {project_name} Server Monitor CI/CD.<br>
        Timestamp: {timestamp}</p>
    """.format(project_name=project_name, timestamp=timestamp)
    

    # Add detailed reports for each server
    html += "<h3>Detailed Server Reports</h3>"
    
    for server in servers.keys():
        html += f"<h4>Server: {server}</h4>"
        html += """
        <table>
            <tr>
                <th>Service</th>
                <th>Status</th>
                <th>URL</th>
            </tr>
        """
        
        for service in servers[server]:
            service_name = service['service']
            status = service['status']
            status_class = 'status-up' if status == 'UP' else 'status-down' if status == 'DOWN' else 'status-na'
            url = service.get('url', f"https://{service_name.lower()}.{server}")
            
            html += f"""
            <tr>
                <td>{service_name}</td>
                <td class='{status_class}'>{status}</td>
                <td><a href='{url}'>{url}</a></td>
            </tr>
            """
        
        html += "</table>"
    
    # Close HTML
    html += """
        <p><br>Best regards,<br>Automated Monitoring System</p>
    </body>
    </html>
    """
    
    # Create subject line
    up_count = sum(1 for s in services if s.get('status') == 'UP')
    down_count = sum(1 for s in services if s.get('status') == 'DOWN')
    subject = f"[Status] {up_count} UP, {down_count} DOWN - {project_name}"
    if subject_prefix:
        subject = f"{subject_prefix} {subject}"
    
    return subject, html

def send_email(sender, recipients, subject, html_content, smtp_config):
    """Send the email with the status report."""
    # Create message container
    msg = MIMEMultipart('alternative')
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)
    msg['Subject'] = subject
    
    # Attach HTML content
    part1 = MIMEText(html_content, 'html', 'utf-8')
    msg.attach(part1)
    
    try:
        with smtplib.SMTP(smtp_config['host'], smtp_config['port']) as server:
            server.starttls()
            if smtp_config['user'] and smtp_config['password']:
                server.login(smtp_config['user'], smtp_config['password'])
            server.send_message(msg)
        print("✅ Email sent successfully")
        return True
    except Exception as e:
        print(f"❌ Failed to send email: {e}")
        return False

def main():
    if len(sys.argv) < 3:
        print("Usage: python send_status_email.py <status_file> <project_name> [subject_prefix]")
        sys.exit(1)
    
    status_file = sys.argv[1]
    project_name = sys.argv[2]
    subject_prefix = sys.argv[3] if len(sys.argv) > 3 else None
    
    # SMTP Configuration
    smtp_config = {
        'host': os.getenv('BACKEND_MAIL_HOST', 'smtp.gmail.com'),
        'port': int(os.getenv('BACKEND_MAIL_PORT', '587')),
        'user': os.getenv('BACKEND_MAIL_USER', ''),
        'password': os.getenv('BACKEND_MAIL_PASSWORD', '')
    }
    
    sender = os.getenv('EMAIL_FROM', '')
    recipients = [r.strip() for r in os.getenv('EMAIL_TO', '').split(',') if r.strip()]
    
    if not all([sender, recipients]):
        print("❌ Missing required email configuration (EMAIL_FROM or EMAIL_TO)")
        sys.exit(1)
    
    try:
        services = read_status_file(status_file)
        if not services:
            print("❌ No services found in the status file")
            sys.exit(1)
            
        subject, html = generate_email_content(services, project_name, subject_prefix)
        if not send_email(sender, recipients, subject, html, smtp_config):
            sys.exit(1)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
